generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client-js"
}

// TODO: may be issue with string https://github.com/prisma/prisma/issues/15041
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// id String @db.Uuid @default(uuid()) @id
//   id             Int   @id @default(autoincrement())
model User {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  username       String         @unique
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  image          String?
  balance        Int?
  hashedPassword String?
  role           String         @default("USER")
  level          String?
  Accounts       Account[]
  Sessions       Session[]
  Files          File[]
  Activities     Activity[]
  Messages       Message[]
  Notifications  Notification[]
  Customers      Customer[]
  Site           Site[]
  Profile        Profile[]
  Token          Token[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User      @relation(fields: [userId], references: [id])
  userId             Int       @unique
  //  @@index([userId], map: "Session_userId_fkey")  // not in example
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Site {
  id          String   @id @default(cuid())
  userId      Int
  name        String // remove
  title       String?
  type        Sitetype @default(custom)
  url         String
  description String?
  api_key     String?
  api_secret  String?
  status      Status   @default(active)
  show_feed   Yesno    @default(no)
  show_share  Yesno    @default(no)
  show_sub    Yesno    @default(no)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  Profile     Profile? @relation(fields: [profileId], references: [id])
  profileId   String?
}

// the messages should be linked to the customer

model Message {
  id        String   @id @default(cuid())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// a customer is just a person from the company

model Customer {
  id                 String       @id @default(cuid())
  userId             Int
  companyId          String?      @unique
  salutation         String
  firstname          String
  lastname           String
  email              String?      @unique
  email_type         String?
  phone_number       String?
  phone_number_type  String?
  street_address     String?
  address_supplement String?
  postal_code        String?
  city               String?
  country            String?
  title              String?
  about              String?
  image              String?
  total_discount     Float?
  terms_of_payment   String?
  delivery_terms     String?
  note               String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  Invoices           Invoice[]
  Files              File[]
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  BankAccount        BankAccount?
}

model BankAccount {
  id            String   @id @default(cuid())
  customerId    String   @unique
  bank_name     String
  account_owner String
  iban          String
  bic           String
  Customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

// files should have a relation to customers

model File {
  id          String   @id @default(cuid())
  userId      Int
  customerId  String
  invoiceId   String?
  url         String
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Invoice     Invoice? @relation(fields: [invoiceId], references: [id])
}

model Activity {
  id        String   @id @default(cuid())
  userId    Int      @unique
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  title       String?
  name        String?
  subject     String?
  yesno       String   @default("NO")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// an invoice has one customer and one company

model Invoice {
  id               String         @id @default(cuid())
  customerId       String         @unique
  termsOfPaymentId String         @unique
  billNumber       String
  documentTitle    String
  introductoryText String
  postScript       String?
  totalPrice       Float?
  sendAt           DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Customer         Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  TermsOfPayment   TermsOfPayment @relation(fields: [termsOfPaymentId], references: [id], onDelete: Cascade)
  Files            File[]
}

model InvoiceItems {
  id        String   @id @default(cuid())
  project   String
  amount    Int
  currency  String
  unit      String
  hours     Int
  rate      Float
  price     Float
  tax       Float
  discount  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TermsOfPayment {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Invoice   Invoice?
}

enum Role {
  USER
  ADMIN
}

enum Currencies {
  usd
  euro
}

enum Seperators {
  comma
  period
}

enum Languages {
  english
  spanish
}

enum Yesno {
  yes
  no
}

enum Status {
  active
  archived
  inactive
}

enum Sitetype {
  custom
  site
  email
  phone
}

model Profile {
  id          String   @id @default(cuid())
  userId      Int
  title       String
  username    String   @unique
  description String?
  theme       Json?
  widgets     Json?
  current     Yesno    @default(no)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  //username              User?   @relation(fields: [username], references: [username])
  Site        Site[]
}
